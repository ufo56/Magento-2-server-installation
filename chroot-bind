#!/bin/bash

_CHROOTS_CMD="ls -1d /home/*"
_BIND="\
/proc \
/dev/urandom \
/dev/zero \
/dev/null \
/dev/tty \
/dev/pts \
/usr/share/zoneinfo \
/usr/share/phpMyAdmin \
/usr/share/php \
/usr/share/terminfo \
/usr/bin/sh \
/usr/bin/bash \
/usr/bin/tty \
/usr/bin/whoami \
/usr/bin/id \
/usr/bin/grep \
/usr/bin/find 
/usr/bin/dircolors \
/usr/bin/env \
/usr/bin/ls \
/usr/bin/php \
/usr/libexec/grepconf.sh \
/usr/lib64 \
/etc/pki \
/etc/resolv.conf \
/etc/nsswitch.conf \
/etc/group \
/etc/passwd \
/etc/profile \
/etc/profile.d \
/etc/php.d \
/etc/php.ini \
/etc/DIR_COLORS \
/etc/DIR_COLORS.256color \
/etc/DIR_COLORS.lightbgcolor"

# File with additional binds.
_BIND_LOCAL="../bind.conf"

is_bound() {
	mount | grep " on $1 type " > /dev/null && return 0 || return 1
}

get_binds() {
	local chroot="$1"
	echo $_BIND
	cd "$chroot"
	[ -f "$_BIND_LOCAL" ] && cat "$_BIND_LOCAL"
}

delete_path() {
	local chroot="$1"
	local path="$2"
	local lastPath=""
	local cmd="echo \" (Not deleted, use -do)\""
	while [ "$path" != "/" ]; do lastPath="$path"; path=`dirname $path`; done;
	$_OPT_DO && cmd="rm -rf \"${chroot}${lastPath}\" && echo \" (deleted)\""
	[ -e "${chroot}${lastPath}" ] && echo -en "\tRemove: ${chroot}${lastPath}" && eval "$cmd" && return 0
	return 1
}

# Parse commandline
_OPT_CLEAN=false
_OPT_DO=false

case "$1" in
	"status" ) _OPT_ACTION="status";;
	"bind"   ) _OPT_ACTION="bind";;

	"unbind" )
		_OPT_ACTION="unbind"
		[ "$2" = "clean" ] && _OPT_CLEAN=true
		[ "$3" = "-do" ] && _OPT_DO=true
		[ -n "$2" ] && ! $_OPT_CLEAN && _OPT_ACTION="help"
		[ -n "$3" ] && ! $_OPT_DO && _OPT_ACTION="help"
		;;

	*) _OPT_ACTION="help";;
esac

# Print help
[ "$_OPT_ACTION" = "help" ] && cat <<EOF && exit 1
Usage: $0 <command> [<subcommand> [-do]]
	<command> can be one of
	status:
		Show if pathes defined in \$_BIND are mounted (green)
		or not (red)
	bind: 
		Bind any path defined in \$_BIND to any chroot
		given by \$_CHROOTS_CMD if it is not bound already.
	unbind [clean [-do]]:
		Unmount all binds defined in \$_BIND mounted to chroots.
		If "clean" is given, the mountpoints created for binding
		will be deleted. If -do is omitted it will only print what
		would be deleted. Use with -do to actually delete.
EOF

# Do operation with chroots
$_CHROOTS_CMD | while read chroot; do
	echo "Chroot: $chroot"
	for bind in `get_binds "${chroot}"`; do
		
		mountpoint="${chroot}${bind}"

		# List binds
		if [ "$_OPT_ACTION" = "status" ]; then
			is_bound "$mountpoint" && echo -en "\t\033[32m+" || echo -en "\t\033[31m-"
			echo -e "\033[0m ${bind}"
			continue
		fi

		# Bind if not bound
		if [ "$_OPT_ACTION" = "bind" ] && ! is_bound "${mountpoint}"; then
			# Create mountpoint (could be directory or file)
			[ -d "${bind}" ] && mkdir -p "${mountpoint}" || mkdir -p "${chroot}`dirname ${bind}`" && touch "${mountpoint}"
			# Mount bind read-only
			echo -en "\t  "  && mount -v -o "bind,ro" "${bind}" "${mountpoint}"
			continue
		fi

		# Unbind if bound
		[ "$_OPT_ACTION" = "unbind" ] && is_bound "${mountpoint}" && echo -en "\t" && umount -v "${mountpoint}"

	done;
	
	# Clean up directories and files created as mountpoint
	[ "$_OPT_ACTION" = "unbind" ] && $_OPT_CLEAN && for bind in `get_binds "${chroot}"`; do delete_path "${chroot}" "${bind}"; done;
	
done;
